# Portable Bash Environment Configuration
# Generated by portable-bash-env installer
# This file is sourced by interactive bash shells

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# ============================================================================
# Environment Variables
# ============================================================================

# Set history control
HISTCONTROL=ignoreboth
HISTSIZE=10000
HISTFILESIZE=20000

# Append to history file, don't overwrite
shopt -s histappend

# Check window size after each command
shopt -s checkwinsize

# Enable extended globbing
shopt -s extglob

# Color support for ls and grep
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# ============================================================================
# Path Configuration
# ============================================================================

# Add user bin directories to PATH
export PATH="$HOME/.local/bin:$PATH"
export PATH="$HOME/bin:$PATH"

# pyenv configuration
export PYENV_ROOT="$HOME/.pyenv"
if [[ -d "$PYENV_ROOT" ]]; then
    export PATH="$PYENV_ROOT/bin:$PATH"
    eval "$(pyenv init --path)"
fi

# goenv configuration
export GOENV_ROOT="$HOME/.goenv"
if [[ -d "$GOENV_ROOT" ]]; then
    export PATH="$GOENV_ROOT/bin:$PATH"
    eval "$(goenv init -)"
fi

# Rust/Cargo configuration
if [[ -d "$HOME/.cargo/bin" ]]; then
    export PATH="$HOME/.cargo/bin:$PATH"
fi

# fzf configuration
if [[ -d "$HOME/.fzf/bin" ]]; then
    export PATH="$HOME/.fzf/bin:$PATH"
fi

# ============================================================================
# bash-it Configuration
# ============================================================================

# Path to bash-it installation
export BASH_IT="$HOME/.bash_it"

# bash-it theme
export BASH_IT_THEME='liquidprompt'

# Enable SCM (Source Control Management) checking in prompt
export SCM_CHECK=true

# Load bash-it
if [[ -f "$BASH_IT/bash_it.sh" ]]; then
    source "$BASH_IT/bash_it.sh"
fi

# ============================================================================
# ble.sh Configuration (Advanced Bash Line Editor)
# ============================================================================

# Note: ble.sh is loaded via bash-it's blesh plugin
# Configuration is in ~/.blerc

# ============================================================================
# Tool Initializations
# ============================================================================

# pyenv-virtualenv initialization
if command -v pyenv 1>/dev/null 2>&1; then
    eval "$(pyenv init -)"
    if [[ -d "$PYENV_ROOT/plugins/pyenv-virtualenv" ]]; then
        eval "$(pyenv virtualenv-init -)"
    fi
fi

# zoxide initialization (smart cd)
if command -v zoxide 1>/dev/null 2>&1; then
    eval "$(zoxide init bash)"
fi

# thefuck initialization
if command -v thefuck 1>/dev/null 2>&1; then
    eval "$(thefuck --alias)"
fi

# ============================================================================
# Additional Configuration
# ============================================================================

# Enable programmable completion features
if ! shopt -oq posix; then
    if [ -f /usr/share/bash-completion/bash_completion ]; then
        . /usr/share/bash-completion/bash_completion
    elif [ -f /etc/bash_completion ]; then
        . /etc/bash_completion
    fi
fi

# Source local bashrc if it exists (for machine-specific configuration)
if [[ -f "$HOME/.bashrc.local" ]]; then
    source "$HOME/.bashrc.local"
fi

# bashhub integration (if installed)
if [[ -f "$HOME/.bashhub/bashhub.sh" ]]; then
    source "$HOME/.bashhub/bashhub.sh"
fi

